-- Muscle Legends Fast Grinding Script for Executors
-- Optimized for compatibility with various executors

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Variables
local player = Players.LocalPlayer
local success = false

-- Print function that works across executors
local function output(text)
    if printconsole then
        printconsole(text)
    elseif print then
        print(text)
    end
end

output("Script starting...")

-- Hide frames (with protection)
pcall(function()
    for _, obj in pairs(ReplicatedStorage:GetChildren()) do
        if obj.Name:match("Frame$") then
            obj.Visible = false
        end
    end
    output("Frames hidden")
end)

-- Function to find the correct path to the pets folder
local function findPetsFolder()
    -- Try different common paths
    local paths = {
        player.petsFolder,
        player:FindFirstChild("petsFolder"),
        player:FindFirstChild("PetsFolder"),
        player:FindFirstChild("Pets")
    }
    
    for _, path in pairs(paths) do
        if path then
            output("Found pets folder: " .. path.Name)
            return path
        end
    end
    
    output("WARNING: Could not find pets folder")
    return nil
end

-- Function to find the unique pets folder
local function findUniquePetsFolder(petsFolder)
    if not petsFolder then return nil end
    
    -- Try different common paths
    local paths = {
        petsFolder:FindFirstChild("Unique"),
        petsFolder:FindFirstChild("unique"),
        petsFolder:FindFirstChild("Legendary"),
        petsFolder
    }
    
    for _, path in pairs(paths) do
        if path then
            output("Found unique pets folder: " .. path.Name)
            return path
        end
    end
    
    output("WARNING: Could not find unique pets folder")
    return petsFolder -- Return the main folder as fallback
end

-- Function to unequip all pets
local function unequipAllPets()
    output("Attempting to unequip all pets...")
    
    local petsFolder = findPetsFolder()
    if not petsFolder then return false end
    
    -- Try to find the unequip event
    local equipEvent = nil
    pcall(function()
        equipEvent = ReplicatedStorage.rEvents.equipPetEvent
    end)
    
    if not equipEvent then
        pcall(function()
            equipEvent = ReplicatedStorage:FindFirstChild("rEvents"):FindFirstChild("equipPetEvent")
        end)
    end
    
    if not equipEvent then
        output("WARNING: Could not find equip pet event")
        return false
    end
    
    -- Try to unequip pets
    local unequipped = false
    pcall(function()
        for _, folder in pairs(petsFolder:GetChildren()) do
            if folder:IsA("Folder") or folder:IsA("Model") then
                for _, pet in pairs(folder:GetChildren()) do
                    equipEvent:FireServer("unequipPet", pet)
                    unequipped = true
                end
            end
        end
    end)
    
    wait(0.5)
    output(unequipped and "Pets unequipped" or "No pets to unequip")
    return unequipped
end

-- Function to equip Swift Samurai pet
local function equipSwiftSamurai()
    output("Attempting to equip Swift Samurai...")
    
    local petsFolder = findPetsFolder()
    if not petsFolder then return false end
    
    local uniqueFolder = findUniquePetsFolder(petsFolder)
    if not uniqueFolder then return false end
    
    -- Try to find the equip event
    local equipEvent = nil
    pcall(function()
        equipEvent = ReplicatedStorage.rEvents.equipPetEvent
    end)
    
    if not equipEvent then
        pcall(function()
            equipEvent = ReplicatedStorage:FindFirstChild("rEvents"):FindFirstChild("equipPetEvent")
        end)
    end
    
    if not equipEvent then
        output("WARNING: Could not find equip pet event")
        return false
    end
    
    -- Look for Swift Samurai
    local foundPet = false
    pcall(function()
        for _, pet in pairs(uniqueFolder:GetChildren()) do
            if pet.Name == "Swift Samurai" then
                output("Found Swift Samurai pet, equipping...")
                equipEvent:FireServer("equipPet", pet)
                foundPet = true
                break
            end
        end
    end)
    
    if not foundPet then
        output("Swift Samurai pet not found. Will continue without it.")
    else
        output("Swift Samurai equipped successfully")
    end
    
    return foundPet
end

-- Function to find the muscle event
local function findMuscleEvent()
    -- Try different common paths
    local paths = {
        player.muscleEvent,
        player:FindFirstChild("muscleEvent"),
        player:FindFirstChild("MuscleEvent"),
        ReplicatedStorage:FindFirstChild("muscleEvent"),
        ReplicatedStorage:FindFirstChild("MuscleEvent")
    }
    
    for _, path in pairs(paths) do
        if path then
            output("Found muscle event: " .. path.Name)
            return path
        end
    end
    
    output("ERROR: Could not find muscle event")
    return nil
end

-- Try to unequip and equip pets
pcall(function()
    unequipAllPets()
    wait(0.5)
    equipSwiftSamurai()
    wait(0.5)
end)

-- Find the muscle event
local muscleEvent = findMuscleEvent()
if not muscleEvent then
    output("Cannot start grinding: muscle event not found")
    return
end

-- Start super fast grinding
output("Starting maximum speed grinding...")
for i = 1, 25 do -- 25 threads for maximum speed
    spawn(function()
        while true do
            for j = 1, 10 do -- Send 10 requests per cycle
                pcall(function()
                    muscleEvent:FireServer("rep")
                end)
            end
            wait() -- Small wait to prevent crashes
        end
    end)
end

output("Grinding at maximum speed! Your strength should increase rapidly.")
success = true
